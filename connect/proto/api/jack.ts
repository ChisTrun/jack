/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: api/jack.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
import * as grpc_web_1 from "grpc-web";
export namespace server {
    export class Student extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
            gpa?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("gpa" in data && data.gpa != undefined) {
                    this.gpa = data.gpa;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get gpa() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set gpa(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            gpa?: number;
        }): Student {
            const message = new Student({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.gpa != null) {
                message.gpa = data.gpa;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                gpa?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.gpa != null) {
                data.gpa = this.gpa;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeUint64(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.gpa != 0)
                writer.writeDouble(3, this.gpa);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Student {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Student();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.gpa = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Student {
            return Student.deserialize(bytes);
        }
    }
    export class GetStudentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            student_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("student_id" in data && data.student_id != undefined) {
                    this.student_id = data.student_id;
                }
            }
        }
        get student_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set student_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            student_id?: number;
        }): GetStudentRequest {
            const message = new GetStudentRequest({});
            if (data.student_id != null) {
                message.student_id = data.student_id;
            }
            return message;
        }
        toObject() {
            const data: {
                student_id?: number;
            } = {};
            if (this.student_id != null) {
                data.student_id = this.student_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.student_id != 0)
                writer.writeUint64(1, this.student_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetStudentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetStudentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.student_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetStudentRequest {
            return GetStudentRequest.deserialize(bytes);
        }
    }
    export class GetStudentResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            student?: Student;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("student" in data && data.student != undefined) {
                    this.student = data.student;
                }
            }
        }
        get student() {
            return pb_1.Message.getWrapperField(this, Student, 1) as Student;
        }
        set student(value: Student) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_student() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            student?: ReturnType<typeof Student.prototype.toObject>;
        }): GetStudentResponse {
            const message = new GetStudentResponse({});
            if (data.student != null) {
                message.student = Student.fromObject(data.student);
            }
            return message;
        }
        toObject() {
            const data: {
                student?: ReturnType<typeof Student.prototype.toObject>;
            } = {};
            if (this.student != null) {
                data.student = this.student.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_student)
                writer.writeMessage(1, this.student, () => this.student.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetStudentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetStudentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.student, () => message.student = Student.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetStudentResponse {
            return GetStudentResponse.deserialize(bytes);
        }
    }
    export abstract class UnimplementedJackService {
        static definition = {
            GetStudent: {
                path: "/server.Jack/GetStudent",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetStudentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetStudentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetStudentResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetStudentResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetStudent(call: grpc_1.ServerUnaryCall<GetStudentRequest, GetStudentResponse>, callback: grpc_1.sendUnaryData<GetStudentResponse>): void;
    }
    export class JackClient {
        private _address: string;
        private _client: grpc_web_1.GrpcWebClientBase;
        constructor(address: string, credentials?: Object, options?: grpc_web_1.GrpcWebClientBaseOptions) {
            if (!options)
                options = {};
            options.format = options.format || "text";
            this._address = address;
            this._client = new grpc_web_1.GrpcWebClientBase(options);
        }
        private static GetStudent = new grpc_web_1.MethodDescriptor<GetStudentRequest, GetStudentResponse>("/server.Jack/GetStudent", grpc_web_1.MethodType.UNARY, GetStudentRequest, GetStudentResponse, (message: GetStudentRequest) => message.serialize(), GetStudentResponse.deserialize);
        GetStudent(message: GetStudentRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: GetStudentResponse) => void) {
            return this._client.rpcCall<GetStudentRequest, GetStudentResponse>(this._address + "/server.Jack/GetStudent", message, metadata || {}, JackClient.GetStudent, callback);
        }
    }
}
